#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PHARMACIE
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Gestion_Pharmacie")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertCATEGORIE_DU_MEDICAMENT(CATEGORIE_DU_MEDICAMENT instance);
    partial void UpdateCATEGORIE_DU_MEDICAMENT(CATEGORIE_DU_MEDICAMENT instance);
    partial void DeleteCATEGORIE_DU_MEDICAMENT(CATEGORIE_DU_MEDICAMENT instance);
    partial void InsertCOMMANDE(COMMANDE instance);
    partial void UpdateCOMMANDE(COMMANDE instance);
    partial void DeleteCOMMANDE(COMMANDE instance);
    partial void InsertFACTURE(FACTURE instance);
    partial void UpdateFACTURE(FACTURE instance);
    partial void DeleteFACTURE(FACTURE instance);
    partial void InsertFOURNISSEUR(FOURNISSEUR instance);
    partial void UpdateFOURNISSEUR(FOURNISSEUR instance);
    partial void DeleteFOURNISSEUR(FOURNISSEUR instance);
    partial void InsertMEDECIN(MEDECIN instance);
    partial void UpdateMEDECIN(MEDECIN instance);
    partial void DeleteMEDECIN(MEDECIN instance);
    partial void InsertMEDICAMENT(MEDICAMENT instance);
    partial void UpdateMEDICAMENT(MEDICAMENT instance);
    partial void DeleteMEDICAMENT(MEDICAMENT instance);
    partial void InsertMEDICAMENT_AVEC_ORD(MEDICAMENT_AVEC_ORD instance);
    partial void UpdateMEDICAMENT_AVEC_ORD(MEDICAMENT_AVEC_ORD instance);
    partial void DeleteMEDICAMENT_AVEC_ORD(MEDICAMENT_AVEC_ORD instance);
    partial void InsertORDONNANCE(ORDONNANCE instance);
    partial void UpdateORDONNANCE(ORDONNANCE instance);
    partial void DeleteORDONNANCE(ORDONNANCE instance);
    partial void InsertSTOCK(STOCK instance);
    partial void UpdateSTOCK(STOCK instance);
    partial void DeleteSTOCK(STOCK instance);
    partial void InsertUTILISATEUR(UTILISATEUR instance);
    partial void UpdateUTILISATEUR(UTILISATEUR instance);
    partial void DeleteUTILISATEUR(UTILISATEUR instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::PHARMACIE.Properties.Settings.Default.Gestion_PharmacieConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CATEGORIE_DU_MEDICAMENT> CATEGORIE_DU_MEDICAMENT
		{
			get
			{
				return this.GetTable<CATEGORIE_DU_MEDICAMENT>();
			}
		}
		
		public System.Data.Linq.Table<COMMANDE> COMMANDE
		{
			get
			{
				return this.GetTable<COMMANDE>();
			}
		}
		
		public System.Data.Linq.Table<FACTURE> FACTURE
		{
			get
			{
				return this.GetTable<FACTURE>();
			}
		}
		
		public System.Data.Linq.Table<FOURNISSEUR> FOURNISSEUR
		{
			get
			{
				return this.GetTable<FOURNISSEUR>();
			}
		}
		
		public System.Data.Linq.Table<MEDECIN> MEDECIN
		{
			get
			{
				return this.GetTable<MEDECIN>();
			}
		}
		
		public System.Data.Linq.Table<MEDICAMENT> MEDICAMENT
		{
			get
			{
				return this.GetTable<MEDICAMENT>();
			}
		}
		
		public System.Data.Linq.Table<MEDICAMENT_AVEC_ORD> MEDICAMENT_AVEC_ORD
		{
			get
			{
				return this.GetTable<MEDICAMENT_AVEC_ORD>();
			}
		}
		
		public System.Data.Linq.Table<ORDONNANCE> ORDONNANCE
		{
			get
			{
				return this.GetTable<ORDONNANCE>();
			}
		}
		
		public System.Data.Linq.Table<STOCK> STOCK
		{
			get
			{
				return this.GetTable<STOCK>();
			}
		}
		
		public System.Data.Linq.Table<UTILISATEUR> UTILISATEUR
		{
			get
			{
				return this.GetTable<UTILISATEUR>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CATEGORIE_DU_MEDICAMENT")]
	public partial class CATEGORIE_DU_MEDICAMENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _code_categ;
		
		private string _libelle_categ;
		
		private EntitySet<MEDICAMENT> _MEDICAMENT;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncode_categChanging(int value);
    partial void Oncode_categChanged();
    partial void Onlibelle_categChanging(string value);
    partial void Onlibelle_categChanged();
    #endregion
		
		public CATEGORIE_DU_MEDICAMENT()
		{
			this._MEDICAMENT = new EntitySet<MEDICAMENT>(new Action<MEDICAMENT>(this.attach_MEDICAMENT), new Action<MEDICAMENT>(this.detach_MEDICAMENT));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code_categ", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int code_categ
		{
			get
			{
				return this._code_categ;
			}
			set
			{
				if ((this._code_categ != value))
				{
					this.Oncode_categChanging(value);
					this.SendPropertyChanging();
					this._code_categ = value;
					this.SendPropertyChanged("code_categ");
					this.Oncode_categChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_libelle_categ", DbType="VarChar(30)")]
		public string libelle_categ
		{
			get
			{
				return this._libelle_categ;
			}
			set
			{
				if ((this._libelle_categ != value))
				{
					this.Onlibelle_categChanging(value);
					this.SendPropertyChanging();
					this._libelle_categ = value;
					this.SendPropertyChanged("libelle_categ");
					this.Onlibelle_categChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CATEGORIE_DU_MEDICAMENT_MEDICAMENT", Storage="_MEDICAMENT", ThisKey="code_categ", OtherKey="code_categ")]
		public EntitySet<MEDICAMENT> MEDICAMENT
		{
			get
			{
				return this._MEDICAMENT;
			}
			set
			{
				this._MEDICAMENT.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MEDICAMENT(MEDICAMENT entity)
		{
			this.SendPropertyChanging();
			entity.CATEGORIE_DU_MEDICAMENT = this;
		}
		
		private void detach_MEDICAMENT(MEDICAMENT entity)
		{
			this.SendPropertyChanging();
			entity.CATEGORIE_DU_MEDICAMENT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.COMMANDE")]
	public partial class COMMANDE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _code_facture;
		
		private int _code_medicament;
		
		private System.Nullable<int> _qte_vendue;
		
		private EntityRef<FACTURE> _FACTURE;
		
		private EntityRef<MEDICAMENT> _MEDICAMENT;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncode_factureChanging(int value);
    partial void Oncode_factureChanged();
    partial void Oncode_medicamentChanging(int value);
    partial void Oncode_medicamentChanged();
    partial void Onqte_vendueChanging(System.Nullable<int> value);
    partial void Onqte_vendueChanged();
    #endregion
		
		public COMMANDE()
		{
			this._FACTURE = default(EntityRef<FACTURE>);
			this._MEDICAMENT = default(EntityRef<MEDICAMENT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code_facture", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int code_facture
		{
			get
			{
				return this._code_facture;
			}
			set
			{
				if ((this._code_facture != value))
				{
					if (this._FACTURE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncode_factureChanging(value);
					this.SendPropertyChanging();
					this._code_facture = value;
					this.SendPropertyChanged("code_facture");
					this.Oncode_factureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code_medicament", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int code_medicament
		{
			get
			{
				return this._code_medicament;
			}
			set
			{
				if ((this._code_medicament != value))
				{
					if (this._MEDICAMENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncode_medicamentChanging(value);
					this.SendPropertyChanging();
					this._code_medicament = value;
					this.SendPropertyChanged("code_medicament");
					this.Oncode_medicamentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qte_vendue", DbType="Int")]
		public System.Nullable<int> qte_vendue
		{
			get
			{
				return this._qte_vendue;
			}
			set
			{
				if ((this._qte_vendue != value))
				{
					this.Onqte_vendueChanging(value);
					this.SendPropertyChanging();
					this._qte_vendue = value;
					this.SendPropertyChanged("qte_vendue");
					this.Onqte_vendueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FACTURE_COMMANDE", Storage="_FACTURE", ThisKey="code_facture", OtherKey="code_facture", IsForeignKey=true)]
		public FACTURE FACTURE
		{
			get
			{
				return this._FACTURE.Entity;
			}
			set
			{
				FACTURE previousValue = this._FACTURE.Entity;
				if (((previousValue != value) 
							|| (this._FACTURE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FACTURE.Entity = null;
						previousValue.COMMANDE.Remove(this);
					}
					this._FACTURE.Entity = value;
					if ((value != null))
					{
						value.COMMANDE.Add(this);
						this._code_facture = value.code_facture;
					}
					else
					{
						this._code_facture = default(int);
					}
					this.SendPropertyChanged("FACTURE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDICAMENT_COMMANDE", Storage="_MEDICAMENT", ThisKey="code_medicament", OtherKey="code_medicament", IsForeignKey=true)]
		public MEDICAMENT MEDICAMENT
		{
			get
			{
				return this._MEDICAMENT.Entity;
			}
			set
			{
				MEDICAMENT previousValue = this._MEDICAMENT.Entity;
				if (((previousValue != value) 
							|| (this._MEDICAMENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MEDICAMENT.Entity = null;
						previousValue.COMMANDE.Remove(this);
					}
					this._MEDICAMENT.Entity = value;
					if ((value != null))
					{
						value.COMMANDE.Add(this);
						this._code_medicament = value.code_medicament;
					}
					else
					{
						this._code_medicament = default(int);
					}
					this.SendPropertyChanged("MEDICAMENT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FACTURE")]
	public partial class FACTURE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _code_facture;
		
		private System.Nullable<System.DateTime> _date_facturation;
		
		private System.Nullable<double> _montant;
		
		private System.Nullable<int> _id_utilisateur;
		
		private System.Nullable<int> _code_ord;
		
		private EntitySet<COMMANDE> _COMMANDE;
		
		private EntityRef<ORDONNANCE> _ORDONNANCE;
		
		private EntityRef<UTILISATEUR> _UTILISATEUR;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncode_factureChanging(int value);
    partial void Oncode_factureChanged();
    partial void Ondate_facturationChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_facturationChanged();
    partial void OnmontantChanging(System.Nullable<double> value);
    partial void OnmontantChanged();
    partial void Onid_utilisateurChanging(System.Nullable<int> value);
    partial void Onid_utilisateurChanged();
    partial void Oncode_ordChanging(System.Nullable<int> value);
    partial void Oncode_ordChanged();
    #endregion
		
		public FACTURE()
		{
			this._COMMANDE = new EntitySet<COMMANDE>(new Action<COMMANDE>(this.attach_COMMANDE), new Action<COMMANDE>(this.detach_COMMANDE));
			this._ORDONNANCE = default(EntityRef<ORDONNANCE>);
			this._UTILISATEUR = default(EntityRef<UTILISATEUR>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code_facture", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int code_facture
		{
			get
			{
				return this._code_facture;
			}
			set
			{
				if ((this._code_facture != value))
				{
					this.Oncode_factureChanging(value);
					this.SendPropertyChanging();
					this._code_facture = value;
					this.SendPropertyChanged("code_facture");
					this.Oncode_factureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_facturation", DbType="Date")]
		public System.Nullable<System.DateTime> date_facturation
		{
			get
			{
				return this._date_facturation;
			}
			set
			{
				if ((this._date_facturation != value))
				{
					this.Ondate_facturationChanging(value);
					this.SendPropertyChanging();
					this._date_facturation = value;
					this.SendPropertyChanged("date_facturation");
					this.Ondate_facturationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_montant", DbType="Float")]
		public System.Nullable<double> montant
		{
			get
			{
				return this._montant;
			}
			set
			{
				if ((this._montant != value))
				{
					this.OnmontantChanging(value);
					this.SendPropertyChanging();
					this._montant = value;
					this.SendPropertyChanged("montant");
					this.OnmontantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_utilisateur", DbType="Int")]
		public System.Nullable<int> id_utilisateur
		{
			get
			{
				return this._id_utilisateur;
			}
			set
			{
				if ((this._id_utilisateur != value))
				{
					if (this._UTILISATEUR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_utilisateurChanging(value);
					this.SendPropertyChanging();
					this._id_utilisateur = value;
					this.SendPropertyChanged("id_utilisateur");
					this.Onid_utilisateurChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code_ord", DbType="Int")]
		public System.Nullable<int> code_ord
		{
			get
			{
				return this._code_ord;
			}
			set
			{
				if ((this._code_ord != value))
				{
					if (this._ORDONNANCE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncode_ordChanging(value);
					this.SendPropertyChanging();
					this._code_ord = value;
					this.SendPropertyChanged("code_ord");
					this.Oncode_ordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FACTURE_COMMANDE", Storage="_COMMANDE", ThisKey="code_facture", OtherKey="code_facture")]
		public EntitySet<COMMANDE> COMMANDE
		{
			get
			{
				return this._COMMANDE;
			}
			set
			{
				this._COMMANDE.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ORDONNANCE_FACTURE", Storage="_ORDONNANCE", ThisKey="code_ord", OtherKey="code_ord", IsForeignKey=true)]
		public ORDONNANCE ORDONNANCE
		{
			get
			{
				return this._ORDONNANCE.Entity;
			}
			set
			{
				ORDONNANCE previousValue = this._ORDONNANCE.Entity;
				if (((previousValue != value) 
							|| (this._ORDONNANCE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ORDONNANCE.Entity = null;
						previousValue.FACTURE.Remove(this);
					}
					this._ORDONNANCE.Entity = value;
					if ((value != null))
					{
						value.FACTURE.Add(this);
						this._code_ord = value.code_ord;
					}
					else
					{
						this._code_ord = default(Nullable<int>);
					}
					this.SendPropertyChanged("ORDONNANCE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UTILISATEUR_FACTURE", Storage="_UTILISATEUR", ThisKey="id_utilisateur", OtherKey="id_utilisateur", IsForeignKey=true)]
		public UTILISATEUR UTILISATEUR
		{
			get
			{
				return this._UTILISATEUR.Entity;
			}
			set
			{
				UTILISATEUR previousValue = this._UTILISATEUR.Entity;
				if (((previousValue != value) 
							|| (this._UTILISATEUR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UTILISATEUR.Entity = null;
						previousValue.FACTURE.Remove(this);
					}
					this._UTILISATEUR.Entity = value;
					if ((value != null))
					{
						value.FACTURE.Add(this);
						this._id_utilisateur = value.id_utilisateur;
					}
					else
					{
						this._id_utilisateur = default(Nullable<int>);
					}
					this.SendPropertyChanged("UTILISATEUR");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_COMMANDE(COMMANDE entity)
		{
			this.SendPropertyChanging();
			entity.FACTURE = this;
		}
		
		private void detach_COMMANDE(COMMANDE entity)
		{
			this.SendPropertyChanging();
			entity.FACTURE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FOURNISSEUR")]
	public partial class FOURNISSEUR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_fournisseur;
		
		private string _nom_f;
		
		private string _prenom_f;
		
		private string _adresse_f;
		
		private System.Nullable<int> _tel_f;
		
		private EntitySet<STOCK> _STOCK;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_fournisseurChanging(int value);
    partial void Onid_fournisseurChanged();
    partial void Onnom_fChanging(string value);
    partial void Onnom_fChanged();
    partial void Onprenom_fChanging(string value);
    partial void Onprenom_fChanged();
    partial void Onadresse_fChanging(string value);
    partial void Onadresse_fChanged();
    partial void Ontel_fChanging(System.Nullable<int> value);
    partial void Ontel_fChanged();
    #endregion
		
		public FOURNISSEUR()
		{
			this._STOCK = new EntitySet<STOCK>(new Action<STOCK>(this.attach_STOCK), new Action<STOCK>(this.detach_STOCK));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_fournisseur", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_fournisseur
		{
			get
			{
				return this._id_fournisseur;
			}
			set
			{
				if ((this._id_fournisseur != value))
				{
					this.Onid_fournisseurChanging(value);
					this.SendPropertyChanging();
					this._id_fournisseur = value;
					this.SendPropertyChanged("id_fournisseur");
					this.Onid_fournisseurChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nom_f", DbType="VarChar(30)")]
		public string nom_f
		{
			get
			{
				return this._nom_f;
			}
			set
			{
				if ((this._nom_f != value))
				{
					this.Onnom_fChanging(value);
					this.SendPropertyChanging();
					this._nom_f = value;
					this.SendPropertyChanged("nom_f");
					this.Onnom_fChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prenom_f", DbType="VarChar(30)")]
		public string prenom_f
		{
			get
			{
				return this._prenom_f;
			}
			set
			{
				if ((this._prenom_f != value))
				{
					this.Onprenom_fChanging(value);
					this.SendPropertyChanging();
					this._prenom_f = value;
					this.SendPropertyChanged("prenom_f");
					this.Onprenom_fChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_adresse_f", DbType="VarChar(100)")]
		public string adresse_f
		{
			get
			{
				return this._adresse_f;
			}
			set
			{
				if ((this._adresse_f != value))
				{
					this.Onadresse_fChanging(value);
					this.SendPropertyChanging();
					this._adresse_f = value;
					this.SendPropertyChanged("adresse_f");
					this.Onadresse_fChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tel_f", DbType="Int")]
		public System.Nullable<int> tel_f
		{
			get
			{
				return this._tel_f;
			}
			set
			{
				if ((this._tel_f != value))
				{
					this.Ontel_fChanging(value);
					this.SendPropertyChanging();
					this._tel_f = value;
					this.SendPropertyChanged("tel_f");
					this.Ontel_fChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FOURNISSEUR_STOCK", Storage="_STOCK", ThisKey="id_fournisseur", OtherKey="id_fournisseur")]
		public EntitySet<STOCK> STOCK
		{
			get
			{
				return this._STOCK;
			}
			set
			{
				this._STOCK.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_STOCK(STOCK entity)
		{
			this.SendPropertyChanging();
			entity.FOURNISSEUR = this;
		}
		
		private void detach_STOCK(STOCK entity)
		{
			this.SendPropertyChanging();
			entity.FOURNISSEUR = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MEDECIN")]
	public partial class MEDECIN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_medecin;
		
		private string _nom_complet_medecin;
		
		private string _adresse_medecin;
		
		private EntitySet<ORDONNANCE> _ORDONNANCE;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_medecinChanging(int value);
    partial void Onid_medecinChanged();
    partial void Onnom_complet_medecinChanging(string value);
    partial void Onnom_complet_medecinChanged();
    partial void Onadresse_medecinChanging(string value);
    partial void Onadresse_medecinChanged();
    #endregion
		
		public MEDECIN()
		{
			this._ORDONNANCE = new EntitySet<ORDONNANCE>(new Action<ORDONNANCE>(this.attach_ORDONNANCE), new Action<ORDONNANCE>(this.detach_ORDONNANCE));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_medecin", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_medecin
		{
			get
			{
				return this._id_medecin;
			}
			set
			{
				if ((this._id_medecin != value))
				{
					this.Onid_medecinChanging(value);
					this.SendPropertyChanging();
					this._id_medecin = value;
					this.SendPropertyChanged("id_medecin");
					this.Onid_medecinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nom_complet_medecin", DbType="VarChar(30)")]
		public string nom_complet_medecin
		{
			get
			{
				return this._nom_complet_medecin;
			}
			set
			{
				if ((this._nom_complet_medecin != value))
				{
					this.Onnom_complet_medecinChanging(value);
					this.SendPropertyChanging();
					this._nom_complet_medecin = value;
					this.SendPropertyChanged("nom_complet_medecin");
					this.Onnom_complet_medecinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_adresse_medecin", DbType="VarChar(100)")]
		public string adresse_medecin
		{
			get
			{
				return this._adresse_medecin;
			}
			set
			{
				if ((this._adresse_medecin != value))
				{
					this.Onadresse_medecinChanging(value);
					this.SendPropertyChanging();
					this._adresse_medecin = value;
					this.SendPropertyChanged("adresse_medecin");
					this.Onadresse_medecinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDECIN_ORDONNANCE", Storage="_ORDONNANCE", ThisKey="id_medecin", OtherKey="id_medecin")]
		public EntitySet<ORDONNANCE> ORDONNANCE
		{
			get
			{
				return this._ORDONNANCE;
			}
			set
			{
				this._ORDONNANCE.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ORDONNANCE(ORDONNANCE entity)
		{
			this.SendPropertyChanging();
			entity.MEDECIN = this;
		}
		
		private void detach_ORDONNANCE(ORDONNANCE entity)
		{
			this.SendPropertyChanging();
			entity.MEDECIN = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MEDICAMENT")]
	public partial class MEDICAMENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _code_medicament;
		
		private string _nom_medicament;
		
		private System.Nullable<double> _prix;
		
		private System.Nullable<int> _qte_en_stock;
		
		private System.Nullable<System.DateTime> _date_exp;
		
		private System.Nullable<int> _id_utilisateur;
		
		private System.Nullable<int> _code_categ;
		
		private EntitySet<COMMANDE> _COMMANDE;
		
		private EntitySet<MEDICAMENT_AVEC_ORD> _MEDICAMENT_AVEC_ORD;
		
		private EntitySet<STOCK> _STOCK;
		
		private EntityRef<CATEGORIE_DU_MEDICAMENT> _CATEGORIE_DU_MEDICAMENT;
		
		private EntityRef<UTILISATEUR> _UTILISATEUR;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncode_medicamentChanging(int value);
    partial void Oncode_medicamentChanged();
    partial void Onnom_medicamentChanging(string value);
    partial void Onnom_medicamentChanged();
    partial void OnprixChanging(System.Nullable<double> value);
    partial void OnprixChanged();
    partial void Onqte_en_stockChanging(System.Nullable<int> value);
    partial void Onqte_en_stockChanged();
    partial void Ondate_expChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_expChanged();
    partial void Onid_utilisateurChanging(System.Nullable<int> value);
    partial void Onid_utilisateurChanged();
    partial void Oncode_categChanging(System.Nullable<int> value);
    partial void Oncode_categChanged();
    #endregion
		
		public MEDICAMENT()
		{
			this._COMMANDE = new EntitySet<COMMANDE>(new Action<COMMANDE>(this.attach_COMMANDE), new Action<COMMANDE>(this.detach_COMMANDE));
			this._MEDICAMENT_AVEC_ORD = new EntitySet<MEDICAMENT_AVEC_ORD>(new Action<MEDICAMENT_AVEC_ORD>(this.attach_MEDICAMENT_AVEC_ORD), new Action<MEDICAMENT_AVEC_ORD>(this.detach_MEDICAMENT_AVEC_ORD));
			this._STOCK = new EntitySet<STOCK>(new Action<STOCK>(this.attach_STOCK), new Action<STOCK>(this.detach_STOCK));
			this._CATEGORIE_DU_MEDICAMENT = default(EntityRef<CATEGORIE_DU_MEDICAMENT>);
			this._UTILISATEUR = default(EntityRef<UTILISATEUR>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code_medicament", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int code_medicament
		{
			get
			{
				return this._code_medicament;
			}
			set
			{
				if ((this._code_medicament != value))
				{
					this.Oncode_medicamentChanging(value);
					this.SendPropertyChanging();
					this._code_medicament = value;
					this.SendPropertyChanged("code_medicament");
					this.Oncode_medicamentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nom_medicament", DbType="VarChar(50)")]
		public string nom_medicament
		{
			get
			{
				return this._nom_medicament;
			}
			set
			{
				if ((this._nom_medicament != value))
				{
					this.Onnom_medicamentChanging(value);
					this.SendPropertyChanging();
					this._nom_medicament = value;
					this.SendPropertyChanged("nom_medicament");
					this.Onnom_medicamentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prix", DbType="Float")]
		public System.Nullable<double> prix
		{
			get
			{
				return this._prix;
			}
			set
			{
				if ((this._prix != value))
				{
					this.OnprixChanging(value);
					this.SendPropertyChanging();
					this._prix = value;
					this.SendPropertyChanged("prix");
					this.OnprixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qte_en_stock", DbType="Int")]
		public System.Nullable<int> qte_en_stock
		{
			get
			{
				return this._qte_en_stock;
			}
			set
			{
				if ((this._qte_en_stock != value))
				{
					this.Onqte_en_stockChanging(value);
					this.SendPropertyChanging();
					this._qte_en_stock = value;
					this.SendPropertyChanged("qte_en_stock");
					this.Onqte_en_stockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_exp", DbType="Date")]
		public System.Nullable<System.DateTime> date_exp
		{
			get
			{
				return this._date_exp;
			}
			set
			{
				if ((this._date_exp != value))
				{
					this.Ondate_expChanging(value);
					this.SendPropertyChanging();
					this._date_exp = value;
					this.SendPropertyChanged("date_exp");
					this.Ondate_expChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_utilisateur", DbType="Int")]
		public System.Nullable<int> id_utilisateur
		{
			get
			{
				return this._id_utilisateur;
			}
			set
			{
				if ((this._id_utilisateur != value))
				{
					if (this._UTILISATEUR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_utilisateurChanging(value);
					this.SendPropertyChanging();
					this._id_utilisateur = value;
					this.SendPropertyChanged("id_utilisateur");
					this.Onid_utilisateurChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code_categ", DbType="Int")]
		public System.Nullable<int> code_categ
		{
			get
			{
				return this._code_categ;
			}
			set
			{
				if ((this._code_categ != value))
				{
					if (this._CATEGORIE_DU_MEDICAMENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncode_categChanging(value);
					this.SendPropertyChanging();
					this._code_categ = value;
					this.SendPropertyChanged("code_categ");
					this.Oncode_categChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDICAMENT_COMMANDE", Storage="_COMMANDE", ThisKey="code_medicament", OtherKey="code_medicament")]
		public EntitySet<COMMANDE> COMMANDE
		{
			get
			{
				return this._COMMANDE;
			}
			set
			{
				this._COMMANDE.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDICAMENT_MEDICAMENT_AVEC_ORD", Storage="_MEDICAMENT_AVEC_ORD", ThisKey="code_medicament", OtherKey="code_medicament")]
		public EntitySet<MEDICAMENT_AVEC_ORD> MEDICAMENT_AVEC_ORD
		{
			get
			{
				return this._MEDICAMENT_AVEC_ORD;
			}
			set
			{
				this._MEDICAMENT_AVEC_ORD.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDICAMENT_STOCK", Storage="_STOCK", ThisKey="code_medicament", OtherKey="code_medicament")]
		public EntitySet<STOCK> STOCK
		{
			get
			{
				return this._STOCK;
			}
			set
			{
				this._STOCK.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CATEGORIE_DU_MEDICAMENT_MEDICAMENT", Storage="_CATEGORIE_DU_MEDICAMENT", ThisKey="code_categ", OtherKey="code_categ", IsForeignKey=true)]
		public CATEGORIE_DU_MEDICAMENT CATEGORIE_DU_MEDICAMENT
		{
			get
			{
				return this._CATEGORIE_DU_MEDICAMENT.Entity;
			}
			set
			{
				CATEGORIE_DU_MEDICAMENT previousValue = this._CATEGORIE_DU_MEDICAMENT.Entity;
				if (((previousValue != value) 
							|| (this._CATEGORIE_DU_MEDICAMENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CATEGORIE_DU_MEDICAMENT.Entity = null;
						previousValue.MEDICAMENT.Remove(this);
					}
					this._CATEGORIE_DU_MEDICAMENT.Entity = value;
					if ((value != null))
					{
						value.MEDICAMENT.Add(this);
						this._code_categ = value.code_categ;
					}
					else
					{
						this._code_categ = default(Nullable<int>);
					}
					this.SendPropertyChanged("CATEGORIE_DU_MEDICAMENT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UTILISATEUR_MEDICAMENT", Storage="_UTILISATEUR", ThisKey="id_utilisateur", OtherKey="id_utilisateur", IsForeignKey=true)]
		public UTILISATEUR UTILISATEUR
		{
			get
			{
				return this._UTILISATEUR.Entity;
			}
			set
			{
				UTILISATEUR previousValue = this._UTILISATEUR.Entity;
				if (((previousValue != value) 
							|| (this._UTILISATEUR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UTILISATEUR.Entity = null;
						previousValue.MEDICAMENT.Remove(this);
					}
					this._UTILISATEUR.Entity = value;
					if ((value != null))
					{
						value.MEDICAMENT.Add(this);
						this._id_utilisateur = value.id_utilisateur;
					}
					else
					{
						this._id_utilisateur = default(Nullable<int>);
					}
					this.SendPropertyChanged("UTILISATEUR");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_COMMANDE(COMMANDE entity)
		{
			this.SendPropertyChanging();
			entity.MEDICAMENT = this;
		}
		
		private void detach_COMMANDE(COMMANDE entity)
		{
			this.SendPropertyChanging();
			entity.MEDICAMENT = null;
		}
		
		private void attach_MEDICAMENT_AVEC_ORD(MEDICAMENT_AVEC_ORD entity)
		{
			this.SendPropertyChanging();
			entity.MEDICAMENT = this;
		}
		
		private void detach_MEDICAMENT_AVEC_ORD(MEDICAMENT_AVEC_ORD entity)
		{
			this.SendPropertyChanging();
			entity.MEDICAMENT = null;
		}
		
		private void attach_STOCK(STOCK entity)
		{
			this.SendPropertyChanging();
			entity.MEDICAMENT = this;
		}
		
		private void detach_STOCK(STOCK entity)
		{
			this.SendPropertyChanging();
			entity.MEDICAMENT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MEDICAMENT_AVEC_ORD")]
	public partial class MEDICAMENT_AVEC_ORD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _code_medicament;
		
		private int _code_ord;
		
		private EntityRef<MEDICAMENT> _MEDICAMENT;
		
		private EntityRef<ORDONNANCE> _ORDONNANCE;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncode_medicamentChanging(int value);
    partial void Oncode_medicamentChanged();
    partial void Oncode_ordChanging(int value);
    partial void Oncode_ordChanged();
    #endregion
		
		public MEDICAMENT_AVEC_ORD()
		{
			this._MEDICAMENT = default(EntityRef<MEDICAMENT>);
			this._ORDONNANCE = default(EntityRef<ORDONNANCE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code_medicament", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int code_medicament
		{
			get
			{
				return this._code_medicament;
			}
			set
			{
				if ((this._code_medicament != value))
				{
					if (this._MEDICAMENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncode_medicamentChanging(value);
					this.SendPropertyChanging();
					this._code_medicament = value;
					this.SendPropertyChanged("code_medicament");
					this.Oncode_medicamentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code_ord", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int code_ord
		{
			get
			{
				return this._code_ord;
			}
			set
			{
				if ((this._code_ord != value))
				{
					if (this._ORDONNANCE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncode_ordChanging(value);
					this.SendPropertyChanging();
					this._code_ord = value;
					this.SendPropertyChanged("code_ord");
					this.Oncode_ordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDICAMENT_MEDICAMENT_AVEC_ORD", Storage="_MEDICAMENT", ThisKey="code_medicament", OtherKey="code_medicament", IsForeignKey=true)]
		public MEDICAMENT MEDICAMENT
		{
			get
			{
				return this._MEDICAMENT.Entity;
			}
			set
			{
				MEDICAMENT previousValue = this._MEDICAMENT.Entity;
				if (((previousValue != value) 
							|| (this._MEDICAMENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MEDICAMENT.Entity = null;
						previousValue.MEDICAMENT_AVEC_ORD.Remove(this);
					}
					this._MEDICAMENT.Entity = value;
					if ((value != null))
					{
						value.MEDICAMENT_AVEC_ORD.Add(this);
						this._code_medicament = value.code_medicament;
					}
					else
					{
						this._code_medicament = default(int);
					}
					this.SendPropertyChanged("MEDICAMENT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ORDONNANCE_MEDICAMENT_AVEC_ORD", Storage="_ORDONNANCE", ThisKey="code_ord", OtherKey="code_ord", IsForeignKey=true)]
		public ORDONNANCE ORDONNANCE
		{
			get
			{
				return this._ORDONNANCE.Entity;
			}
			set
			{
				ORDONNANCE previousValue = this._ORDONNANCE.Entity;
				if (((previousValue != value) 
							|| (this._ORDONNANCE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ORDONNANCE.Entity = null;
						previousValue.MEDICAMENT_AVEC_ORD.Remove(this);
					}
					this._ORDONNANCE.Entity = value;
					if ((value != null))
					{
						value.MEDICAMENT_AVEC_ORD.Add(this);
						this._code_ord = value.code_ord;
					}
					else
					{
						this._code_ord = default(int);
					}
					this.SendPropertyChanged("ORDONNANCE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ORDONNANCE")]
	public partial class ORDONNANCE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _code_ord;
		
		private System.Nullable<System.DateTime> _date_consult;
		
		private System.Nullable<int> _id_medecin;
		
		private EntitySet<FACTURE> _FACTURE;
		
		private EntitySet<MEDICAMENT_AVEC_ORD> _MEDICAMENT_AVEC_ORD;
		
		private EntityRef<MEDECIN> _MEDECIN;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncode_ordChanging(int value);
    partial void Oncode_ordChanged();
    partial void Ondate_consultChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_consultChanged();
    partial void Onid_medecinChanging(System.Nullable<int> value);
    partial void Onid_medecinChanged();
    #endregion
		
		public ORDONNANCE()
		{
			this._FACTURE = new EntitySet<FACTURE>(new Action<FACTURE>(this.attach_FACTURE), new Action<FACTURE>(this.detach_FACTURE));
			this._MEDICAMENT_AVEC_ORD = new EntitySet<MEDICAMENT_AVEC_ORD>(new Action<MEDICAMENT_AVEC_ORD>(this.attach_MEDICAMENT_AVEC_ORD), new Action<MEDICAMENT_AVEC_ORD>(this.detach_MEDICAMENT_AVEC_ORD));
			this._MEDECIN = default(EntityRef<MEDECIN>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code_ord", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int code_ord
		{
			get
			{
				return this._code_ord;
			}
			set
			{
				if ((this._code_ord != value))
				{
					this.Oncode_ordChanging(value);
					this.SendPropertyChanging();
					this._code_ord = value;
					this.SendPropertyChanged("code_ord");
					this.Oncode_ordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_consult", DbType="Date")]
		public System.Nullable<System.DateTime> date_consult
		{
			get
			{
				return this._date_consult;
			}
			set
			{
				if ((this._date_consult != value))
				{
					this.Ondate_consultChanging(value);
					this.SendPropertyChanging();
					this._date_consult = value;
					this.SendPropertyChanged("date_consult");
					this.Ondate_consultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_medecin", DbType="Int")]
		public System.Nullable<int> id_medecin
		{
			get
			{
				return this._id_medecin;
			}
			set
			{
				if ((this._id_medecin != value))
				{
					if (this._MEDECIN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_medecinChanging(value);
					this.SendPropertyChanging();
					this._id_medecin = value;
					this.SendPropertyChanged("id_medecin");
					this.Onid_medecinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ORDONNANCE_FACTURE", Storage="_FACTURE", ThisKey="code_ord", OtherKey="code_ord")]
		public EntitySet<FACTURE> FACTURE
		{
			get
			{
				return this._FACTURE;
			}
			set
			{
				this._FACTURE.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ORDONNANCE_MEDICAMENT_AVEC_ORD", Storage="_MEDICAMENT_AVEC_ORD", ThisKey="code_ord", OtherKey="code_ord")]
		public EntitySet<MEDICAMENT_AVEC_ORD> MEDICAMENT_AVEC_ORD
		{
			get
			{
				return this._MEDICAMENT_AVEC_ORD;
			}
			set
			{
				this._MEDICAMENT_AVEC_ORD.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDECIN_ORDONNANCE", Storage="_MEDECIN", ThisKey="id_medecin", OtherKey="id_medecin", IsForeignKey=true)]
		public MEDECIN MEDECIN
		{
			get
			{
				return this._MEDECIN.Entity;
			}
			set
			{
				MEDECIN previousValue = this._MEDECIN.Entity;
				if (((previousValue != value) 
							|| (this._MEDECIN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MEDECIN.Entity = null;
						previousValue.ORDONNANCE.Remove(this);
					}
					this._MEDECIN.Entity = value;
					if ((value != null))
					{
						value.ORDONNANCE.Add(this);
						this._id_medecin = value.id_medecin;
					}
					else
					{
						this._id_medecin = default(Nullable<int>);
					}
					this.SendPropertyChanged("MEDECIN");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FACTURE(FACTURE entity)
		{
			this.SendPropertyChanging();
			entity.ORDONNANCE = this;
		}
		
		private void detach_FACTURE(FACTURE entity)
		{
			this.SendPropertyChanging();
			entity.ORDONNANCE = null;
		}
		
		private void attach_MEDICAMENT_AVEC_ORD(MEDICAMENT_AVEC_ORD entity)
		{
			this.SendPropertyChanging();
			entity.ORDONNANCE = this;
		}
		
		private void detach_MEDICAMENT_AVEC_ORD(MEDICAMENT_AVEC_ORD entity)
		{
			this.SendPropertyChanging();
			entity.ORDONNANCE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STOCK")]
	public partial class STOCK : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _code_stock;
		
		private System.Nullable<int> _qte_entre;
		
		private System.Nullable<System.DateTime> _date_entre;
		
		private System.Nullable<int> _code_medicament;
		
		private System.Nullable<int> _id_fournisseur;
		
		private EntityRef<MEDICAMENT> _MEDICAMENT;
		
		private EntityRef<FOURNISSEUR> _FOURNISSEUR;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncode_stockChanging(int value);
    partial void Oncode_stockChanged();
    partial void Onqte_entreChanging(System.Nullable<int> value);
    partial void Onqte_entreChanged();
    partial void Ondate_entreChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_entreChanged();
    partial void Oncode_medicamentChanging(System.Nullable<int> value);
    partial void Oncode_medicamentChanged();
    partial void Onid_fournisseurChanging(System.Nullable<int> value);
    partial void Onid_fournisseurChanged();
    #endregion
		
		public STOCK()
		{
			this._MEDICAMENT = default(EntityRef<MEDICAMENT>);
			this._FOURNISSEUR = default(EntityRef<FOURNISSEUR>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code_stock", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int code_stock
		{
			get
			{
				return this._code_stock;
			}
			set
			{
				if ((this._code_stock != value))
				{
					this.Oncode_stockChanging(value);
					this.SendPropertyChanging();
					this._code_stock = value;
					this.SendPropertyChanged("code_stock");
					this.Oncode_stockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qte_entre", DbType="Int")]
		public System.Nullable<int> qte_entre
		{
			get
			{
				return this._qte_entre;
			}
			set
			{
				if ((this._qte_entre != value))
				{
					this.Onqte_entreChanging(value);
					this.SendPropertyChanging();
					this._qte_entre = value;
					this.SendPropertyChanged("qte_entre");
					this.Onqte_entreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_entre", DbType="Date")]
		public System.Nullable<System.DateTime> date_entre
		{
			get
			{
				return this._date_entre;
			}
			set
			{
				if ((this._date_entre != value))
				{
					this.Ondate_entreChanging(value);
					this.SendPropertyChanging();
					this._date_entre = value;
					this.SendPropertyChanged("date_entre");
					this.Ondate_entreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code_medicament", DbType="Int")]
		public System.Nullable<int> code_medicament
		{
			get
			{
				return this._code_medicament;
			}
			set
			{
				if ((this._code_medicament != value))
				{
					if (this._MEDICAMENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncode_medicamentChanging(value);
					this.SendPropertyChanging();
					this._code_medicament = value;
					this.SendPropertyChanged("code_medicament");
					this.Oncode_medicamentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_fournisseur", DbType="Int")]
		public System.Nullable<int> id_fournisseur
		{
			get
			{
				return this._id_fournisseur;
			}
			set
			{
				if ((this._id_fournisseur != value))
				{
					if (this._FOURNISSEUR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_fournisseurChanging(value);
					this.SendPropertyChanging();
					this._id_fournisseur = value;
					this.SendPropertyChanged("id_fournisseur");
					this.Onid_fournisseurChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDICAMENT_STOCK", Storage="_MEDICAMENT", ThisKey="code_medicament", OtherKey="code_medicament", IsForeignKey=true)]
		public MEDICAMENT MEDICAMENT
		{
			get
			{
				return this._MEDICAMENT.Entity;
			}
			set
			{
				MEDICAMENT previousValue = this._MEDICAMENT.Entity;
				if (((previousValue != value) 
							|| (this._MEDICAMENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MEDICAMENT.Entity = null;
						previousValue.STOCK.Remove(this);
					}
					this._MEDICAMENT.Entity = value;
					if ((value != null))
					{
						value.STOCK.Add(this);
						this._code_medicament = value.code_medicament;
					}
					else
					{
						this._code_medicament = default(Nullable<int>);
					}
					this.SendPropertyChanged("MEDICAMENT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FOURNISSEUR_STOCK", Storage="_FOURNISSEUR", ThisKey="id_fournisseur", OtherKey="id_fournisseur", IsForeignKey=true)]
		public FOURNISSEUR FOURNISSEUR
		{
			get
			{
				return this._FOURNISSEUR.Entity;
			}
			set
			{
				FOURNISSEUR previousValue = this._FOURNISSEUR.Entity;
				if (((previousValue != value) 
							|| (this._FOURNISSEUR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FOURNISSEUR.Entity = null;
						previousValue.STOCK.Remove(this);
					}
					this._FOURNISSEUR.Entity = value;
					if ((value != null))
					{
						value.STOCK.Add(this);
						this._id_fournisseur = value.id_fournisseur;
					}
					else
					{
						this._id_fournisseur = default(Nullable<int>);
					}
					this.SendPropertyChanged("FOURNISSEUR");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UTILISATEUR")]
	public partial class UTILISATEUR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_utilisateur;
		
		private string _nom_ut;
		
		private string _prenom_ut;
		
		private string _adresse_ut;
		
		private System.Nullable<int> _tel_ut;
		
		private string _app_identifiant;
		
		private string _mot_de_passe;
		
		private EntitySet<FACTURE> _FACTURE;
		
		private EntitySet<MEDICAMENT> _MEDICAMENT;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_utilisateurChanging(int value);
    partial void Onid_utilisateurChanged();
    partial void Onnom_utChanging(string value);
    partial void Onnom_utChanged();
    partial void Onprenom_utChanging(string value);
    partial void Onprenom_utChanged();
    partial void Onadresse_utChanging(string value);
    partial void Onadresse_utChanged();
    partial void Ontel_utChanging(System.Nullable<int> value);
    partial void Ontel_utChanged();
    partial void Onapp_identifiantChanging(string value);
    partial void Onapp_identifiantChanged();
    partial void Onmot_de_passeChanging(string value);
    partial void Onmot_de_passeChanged();
    #endregion
		
		public UTILISATEUR()
		{
			this._FACTURE = new EntitySet<FACTURE>(new Action<FACTURE>(this.attach_FACTURE), new Action<FACTURE>(this.detach_FACTURE));
			this._MEDICAMENT = new EntitySet<MEDICAMENT>(new Action<MEDICAMENT>(this.attach_MEDICAMENT), new Action<MEDICAMENT>(this.detach_MEDICAMENT));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_utilisateur", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_utilisateur
		{
			get
			{
				return this._id_utilisateur;
			}
			set
			{
				if ((this._id_utilisateur != value))
				{
					this.Onid_utilisateurChanging(value);
					this.SendPropertyChanging();
					this._id_utilisateur = value;
					this.SendPropertyChanged("id_utilisateur");
					this.Onid_utilisateurChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nom_ut", DbType="VarChar(30)")]
		public string nom_ut
		{
			get
			{
				return this._nom_ut;
			}
			set
			{
				if ((this._nom_ut != value))
				{
					this.Onnom_utChanging(value);
					this.SendPropertyChanging();
					this._nom_ut = value;
					this.SendPropertyChanged("nom_ut");
					this.Onnom_utChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prenom_ut", DbType="VarChar(30)")]
		public string prenom_ut
		{
			get
			{
				return this._prenom_ut;
			}
			set
			{
				if ((this._prenom_ut != value))
				{
					this.Onprenom_utChanging(value);
					this.SendPropertyChanging();
					this._prenom_ut = value;
					this.SendPropertyChanged("prenom_ut");
					this.Onprenom_utChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_adresse_ut", DbType="VarChar(100)")]
		public string adresse_ut
		{
			get
			{
				return this._adresse_ut;
			}
			set
			{
				if ((this._adresse_ut != value))
				{
					this.Onadresse_utChanging(value);
					this.SendPropertyChanging();
					this._adresse_ut = value;
					this.SendPropertyChanged("adresse_ut");
					this.Onadresse_utChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tel_ut", DbType="Int")]
		public System.Nullable<int> tel_ut
		{
			get
			{
				return this._tel_ut;
			}
			set
			{
				if ((this._tel_ut != value))
				{
					this.Ontel_utChanging(value);
					this.SendPropertyChanging();
					this._tel_ut = value;
					this.SendPropertyChanged("tel_ut");
					this.Ontel_utChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_app_identifiant", DbType="VarChar(10)")]
		public string app_identifiant
		{
			get
			{
				return this._app_identifiant;
			}
			set
			{
				if ((this._app_identifiant != value))
				{
					this.Onapp_identifiantChanging(value);
					this.SendPropertyChanging();
					this._app_identifiant = value;
					this.SendPropertyChanged("app_identifiant");
					this.Onapp_identifiantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mot_de_passe", DbType="VarChar(16)")]
		public string mot_de_passe
		{
			get
			{
				return this._mot_de_passe;
			}
			set
			{
				if ((this._mot_de_passe != value))
				{
					this.Onmot_de_passeChanging(value);
					this.SendPropertyChanging();
					this._mot_de_passe = value;
					this.SendPropertyChanged("mot_de_passe");
					this.Onmot_de_passeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UTILISATEUR_FACTURE", Storage="_FACTURE", ThisKey="id_utilisateur", OtherKey="id_utilisateur")]
		public EntitySet<FACTURE> FACTURE
		{
			get
			{
				return this._FACTURE;
			}
			set
			{
				this._FACTURE.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UTILISATEUR_MEDICAMENT", Storage="_MEDICAMENT", ThisKey="id_utilisateur", OtherKey="id_utilisateur")]
		public EntitySet<MEDICAMENT> MEDICAMENT
		{
			get
			{
				return this._MEDICAMENT;
			}
			set
			{
				this._MEDICAMENT.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FACTURE(FACTURE entity)
		{
			this.SendPropertyChanging();
			entity.UTILISATEUR = this;
		}
		
		private void detach_FACTURE(FACTURE entity)
		{
			this.SendPropertyChanging();
			entity.UTILISATEUR = null;
		}
		
		private void attach_MEDICAMENT(MEDICAMENT entity)
		{
			this.SendPropertyChanging();
			entity.UTILISATEUR = this;
		}
		
		private void detach_MEDICAMENT(MEDICAMENT entity)
		{
			this.SendPropertyChanging();
			entity.UTILISATEUR = null;
		}
	}
}
#pragma warning restore 1591
